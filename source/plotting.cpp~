#include "plotting.hpp"
#include "../main.hpp"

//globals
cv::Mat waterImage, doppImage;
int waterfallColourMapSlider = 0;
int dopplerColourMapSlider = 0;

const int dopplerThresholdMax = 255;
const int colourMapMax = 11;

void initOpenCV(void)
{	
	cv::namedWindow("Waterfall Plot");
	cv::namedWindow("Doppler Plot");
	cv::namedWindow("Control Window", cv::WINDOW_NORMAL);

	cv::moveWindow("Waterfall Plot", 100, 100);					//trackbar is 54 units in height
	cv::moveWindow("Doppler Plot", 600, 100); 
	cv::moveWindow("Control Window", 870, 100); 

	//cv::resizeWindow("Control Window", 300, 2*54);

	cv::createTrackbar( "Threshold Value", "Control Window", &dopplerThresholdSlider, dopplerThresholdMax);
	cv::createTrackbar( "Doppler Colour Map", "Control Window", &dopplerColourMapSlider, colourMapMax);
	cv::createTrackbar( "Waterfall Colour Map", "Control Window", &waterfallColourMapSlider, colourMapMax);

	printMsg("Initialized OpenCV");
}

void updateWaterfall(int rangeLine, uint8_t  *imageValues)
{
	cv::Mat row = cv::Mat(1, PADRANGESIZE, CV_8U, imageValues);
	waterImage.push_back(row);
			
	if (((rangeLine%(UPDATELINE-1) == 0) || rangeLine == (RANGELINES-1)) && rangeLine != 0)
		plotWaterfall();
}

void updateDoppler(uint8_t  *imageValues)
{
	cv::Mat row = cv::Mat(1, DOPPLERSIZE, CV_8U, imageValues);
	doppImage.push_back(row);
}

void plotWaterfall(void)
{
		cv::Mat resizedImage;	

		cv::Size size(500, 500);		
		cv::resize(waterImage, resizedImage, size);	
		cv::equalizeHist(resizedImage, resizedImage);

		cv::applyColorMap(resizedImage, resizedImage, waterfallColourMapSlider);	
		cv::transpose(resizedImage, resizedImage);
		cv::flip(resizedImage, resizedImage, 0);

		cv::imshow("Waterfall Plot", resizedImage);
		//cv::imwrite("waterfall_plot.png", resizedImage);
		cv::waitKey(1);	
		resizedImage.release();
		//waterImage.release();
}

void plotDoppler(void)
{
		cv::Mat resizedImage;	

		cv::Size size(250, 500);		
		cv::resize(doppImage, resizedImage, size);	
		doppImage.release();
		cv::applyColorMap(resizedImage, resizedImage, dopplerColourMapSlider);
		cv::flip(resizedImage, resizedImage, 0);
	
		cv::imshow("Doppler Plot", resizedImage);
		//printf("Doppler Plot:\t\t\tOK\t%fs\n", getTime());
		//cv::imwrite("doppler_plot.png", resizedImage);
		cv::waitKey(1);
		resizedImage.release();	
		doppImage.release();
}

void GNUplot(void)
{
	FILE *pipe_gp = popen("gnuplot", "w");	

	fputs("set terminal postscript eps \n", pipe_gp);
	fputs("set title 'GNUplot'\n", pipe_gp);	
	//fputs("set yrange [-1:1] \n", pipe_gp);
	//fputs("set xrange[500:600] \n", pipe_gp);
	//fputs("set bmargin at screen 0.13 \n", pipe_gp);
	//fputs("set lmargin at screen 0.13 \n", pipe_gp);
	//fputs("set xtics ('0' 0, '10' 205, '20' 410, '30' 615, '40' 820, '50' 1024) \n", pipe_gp);
	//fputs("set xtics ('-500' 0, '-376' 32, '-252' 64, '-128' 96, '0' 128, '128' 160, '252' 192, '376' 224, '500' 255) \n", pipe_gp);
	//fputs("set xlabel 'Frequency [Hz]' \n", pipe_gp);
	//fputs("set xlabel 'Sample Number' \n", pipe_gp);
	//fputs("set ylabel 'Magnitude' \n", pipe_gp);
	fputs("set output 'output.eps' \n", pipe_gp);
	fputs("plot '-' using 1:2 with lines notitle\n", pipe_gp);


	for (int i = 0; i < DOPPLERSIZE; i++) 
		fprintf(pipe_gp, "%i %f\n", i, (rangeBuffer[i][1]));
		//fprintf(pipe_gp, "%i %i\n", i, abs(sqrt(rangeBuffer[i][0]*rangeBuffer[i][0] + rangeBuffer[i][1]*rangeBuffer[i][1]))); 

	fputs("e\n", pipe_gp);
	pclose(pipe_gp);
}
